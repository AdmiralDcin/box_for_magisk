#!/system/bin/sh

scripts=$(realpath $0)
scripts_dir=$(dirname ${scripts})
source /data/adb/box/settings.ini

delete_logs() {
  # Delete logs for each bin in the list
  log info "deleting and backing up logs for ${bin_list[*]}"
  for bin in "${bin_list[@]}"; do
    if [ -f "${run_path}/${bin}.log" ]; then
      mv "${run_path}/${bin}.log" "${run_path}/${bin}-$(date +%Y-%m-%d-%H-%M-%S).log"
    fi
  done

  # Delete other log files
  find "${run_path}" -type f \( -name "root" -o -name "*.yaml" -o -name "*.list" -o -name "*.inotify.log" -o -name "*-report.log" \) -exec rm -f {} \; || log warn "Error deleting other log files"

  # Delete logs that are three days old or older
  find "${run_path}" -type f -name "*.log" -mtime +2 -exec rm -f {} \; || log warn "Error deleting old logs"
}

crontab_geo() {
  if [[ "${auto_update_geox}" != "false" || "${auto_update_subscription}" != "false" ]]; then
    echo "${update_interval_geox} ${scripts_dir}/box.tool geox" >> "${run_path}/root"
    echo "${update_interval_subs} ${scripts_dir}/box.tool subs" >> "${run_path}/root"
    log debug "Interval crontab geox (${update_interval_geox})."
    log debug "Interval crontab subscription (${update_interval_subs})."
    log debug "${bin_name} geox (${auto_update_geox})."
    if [ "${bin_name}" = "clash" ]; then
      log debug "${bin_name} subscription (${auto_update_subscription})."
    fi
  else
    log info "Crontab geox and subscription is disabled."
  fi
}

detected_port() {
  sleep 1
  if [ "${port_detect}" = "true" ]; then
    ${scripts_dir}/box.tool port
  else
    log debug "${bin_name} skipped port detected."
    return 1
  fi
}

still_alive() {
  sleep 1.5
  pid=$(busybox pidof ${bin_name} 2>/dev/null)
  if [ -z "${pid}" ]; then
    log error "${bin_name} service is not running."
    log error "Please check ${bin_name}.log for more information."
    ${scripts_dir}/box.iptables disable >/dev/null 2>&1
    exit 1
  fi
  if ! kill -0 "${pid}" 2>/dev/null; then
    log error "${bin_name} service is not running."
    log error "Killing stale pid '${pid}'"
    busybox pkill -15 "${bin_list[@]}" >/dev/null 2>&1 || killall -15 "${bin_list[@]}" >/dev/null 2>&1
    ${scripts_dir}/box.iptables disable >/dev/null 2>&1
    exit 1
  fi
}

check_permission() {
  if [[ "${box_user_group}" = "root:net_admin" || "${box_user_group}" = "0:3005" ]] && [ -f "${bin_path}" ]; then
    # Set ownership and permission of kernel directory
    chown ${box_user_group} ${bin_path}
    chmod 6755 ${bin_path}
    chmod 0644 "${data_dir}/${bin_name}"/*
    # Set ownership of data directory
    chown -R ${box_user_group} ${data_dir}
    log info "Use the kernel located in '${bin_path}'."
  elif which ${bin_name} | grep -q "/system/bin/"; then
    box_user=$(echo ${box_user_group} | busybox awk -F ':' '{print $1}')
    box_group=$(echo ${box_user_group} | busybox awk -F ':' '{print $2}')
    box_user_id=$(id -u ${box_user})
    box_group_id=$(id -g ${box_group})
    # Check if box_user and box_group exist
    if ! [[ ${box_user_id} && ${box_group_id} ]]; then
     log error "${box_user_group} error, use root:net_admin instead." 
     box_user_group="root:net_admin"
    fi
    bin_path=$(which ${bin_name})
    # Set ownership and permission of kernel directory
    chown ${box_user_group} ${bin_path}
    chmod 6755 ${bin_path}
    chmod 0644 "${data_dir}/${bin_name}"/*
    # Check if user is not root and group is not net_admin
    if [[ "${box_user_id}" != "0" || "${box_group_id}" != "3005" ]]; then
      # Set capability of kernel directory
      if ! setcap 'cap_net_admin,cap_net_raw,cap_net_bind_service+ep' "${bin_path}"; then
        log error "setcap authorization failed, you may need libcap package."
      fi
    fi
    # Set ownership of data directory
    box_user_group="root:net_admin"
    log info "Using kernel directory ${bin_name} in ${bin_path}"
    chown -R ${box_user_group} ${data_dir}
  else
    sed -i "s/box_user_group=.*/box_user_group=\"root:net_admin\"/g" ${settings}
    log error "Kernel '${bin_name}' is missing."
    log error "Please download the '${bin_name}' kernel and place it in the ${bin_kernel}/ directory."
    exit 1
  fi
}

check_in_bin() {
  if ! command -v "${bin_path}" >/dev/null 2>&1; then
    log error "Error: '${bin_path}' not found or not executable."
    exit 1
  elif [ ! -x "${bin_path}" ]; then
    log error "Error: '${bin_path}' is not executable."
    exit 1
  elif [ ! -f "${bin_path}" ]; then
    log error "Error: '${bin_path}' is not a regular file."
    exit 1
  fi

  case "${bin_name}" in
    clash)
      if ! "${bin_path}" -v >/dev/null 2>&1; then
        log error "Error: '${bin_name}' version information not available."
        exit 1
      else
        version_output="$(${bin_path} -v)"
        log info "${version_output}"
      fi
      ;;
    *)
      if ! "${bin_path}" version >/dev/null 2>&1; then
        log error "Error: '${bin_name}' version information not available."
        exit 1
      else
        version_output="$(${bin_path} version)"
        log info "${version_output}"
      fi
      ;;
  esac
}

create_tun() {
  # Enable IP forwarding
  if ! sysctl -w net.ipv4.ip_forward=1 >/dev/null 2>&1 || ! sysctl -w net.ipv6.conf.all.forwarding=1 >/dev/null 2>&1; then
    echo "Cannot enable IP forwarding."
  fi

  # Creates a symlink for /dev/tun if it doesn't already exist
  if [ ! -c "/dev/net/tun" ]; then
    if ! mkdir -p /dev/net; then
      log warn "Cannot create directory /dev/net."
      exit 1
    fi
    if ! mknod /dev/net/tun c 10 200; then
      log warn "Cannot create /dev/net/tun. Possible reasons:"
      log warn "This script is not executed as root user."
      log warn "Your system does not support the TUN/TAP driver."
      log warn "Your system kernel version is not compatible with the TUN/TAP driver."
      exit 1
    fi
  fi
}

prepare_singbox() {
  # Reads the enable value from the tun configuration
  # singbox_tun=$(find /data/adb/box/sing-box/ -name "*.json" -exec busybox awk -F':' '/"type":[[:space:]]*"tun"/{gsub(/^[[:space:]]+|[",[:space:]]+$/,"",$2); print $2}' {} \; | tr -d '"')

  if [[ "${network_mode}" == "mixed" || "${proxy_mode}" == "tun" ]]; then
    sed -i 's/"auto_detect_interface": false/"auto_detect_interface": true/g' "${data_dir}/sing-box/"*.json
    sed -i 's/auto_route": false/auto_route": true/g' "${data_dir}/sing-box/"*.json
  else
    sed -i 's/"auto_detect_interface": true/"auto_detect_interface": false/g' "${data_dir}/sing-box/"*.json
    sed -i 's/auto_route": true/auto_route": false/g' "${data_dir}/sing-box/"*.json
  fi
}

prepare_clash() {
  # ipv6=$(busybox awk '/ipv6:/ { print $2; found=1; exit } END{ if(!found) print "false" }' "${clash_config}" | head -n 1 2>/dev/null)
  # sed -i "s/ipv6:.*/ipv6: ${ipv6}/g" "${clash_config}"
  # sed -i "s/ipv6=.*/ipv6=\"${ipv6}\"/g" ${settings}

  clash_external_ui=$(busybox awk '/external-ui: /{print $1}' "${clash_config}")
  if [ -z "${clash_external_ui}" ]; then
    printf "\nexternal-ui: ./dashboard" >> "${clash_config}"
  fi

  clash_tproxy_port=$(busybox awk '/tproxy-port: /{print $1}' "${clash_config}")
  if [ -z "${clash_tproxy_port}" ]; then
    printf "\ntproxy-port: ${tproxy_port}" >> "${clash_config}"
  fi

  clash_redir_port=$(busybox awk '/redir-port: /{print $1}' "${clash_config}")
  if [ -z "${clash_redir_port}" ]; then
    printf "\nredir-port: ${redir_port}" >> "${clash_config}"
  fi

  if [[ "${network_mode}" == "mixed" || "${proxy_mode}" == "tun" ]]; then
    clash_tun_status=$(busybox awk -F ': ' '/^tun: *$/{getline; print $2}' "${clash_config}")
    if [ -z "${clash_tun_status}" ]; then
      printf '%s\n' '' 'tun:' \
        '  enable: true' \
        '  mtu: 9000' \
        '  device: utun' \
        '  stack: system # gvisor / system / lwip' \
        '  dns-hijack:' \
        '    - any:53' \
        '    - tcp://any:53' \
        '  auto-route: true' \
        '  strict-route: false' \
        '  auto-detect-interface: true' \
        '  include-android-user: [0, 10]' \
        '  exclude-package: []' \ >> "${clash_config}"
    fi
    sed -i "/tun:/ {n;s/enable: false/enable: true/}" "${clash_config}"
  else
    sed -i "/tun:/ {n;s/enable: true/enable: false/}" "${clash_config}"
  fi

  # Reads the enable value from the tun configuration
  clash_tun_status=$(busybox awk -F ': ' '/^tun: *$/{getline; print $2}' "${clash_config}")
  if [ "${clash_tun_status}" != "true" ]; then
    sed -i -E "s/(tproxy-port: )[0-9]+/\1${tproxy_port}/" "${clash_config}"
    # sed -i -E "s/(redir-port: )[0-9]+/\1${redir_port}/" "${clash_config}"
  else
    [ "${proxy_mode}" != "tun" ] && sed -i 's/network_mode=.*/network_mode="mixed"/g' "${settings}"
    sed -i -E "s/(tproxy-port: )[0-9]+/\10/" "${clash_config}"
    sed -i -E "s/(redir-port: )[0-9]+/\10/" "${clash_config}"
  fi
}

run_box() {
  log info "client-list: [ ${bin_list[*]} ]"
  log info "choose: ${bin_name}, start the service."
  ulimit -SHn 65535
  case "${bin_name}" in
    sing-box)
      prepare_singbox
      if ${bin_path} check -D "${data_dir}/${bin_name}" --config-directory "${data_dir}/sing-box" > "${run_path}/${bin_name}-report.log" 2>&1 ; then
        nohup busybox setuidgid ${box_user_group} ${bin_path} run -D "${data_dir}/${bin_name}" --config-directory "${data_dir}/sing-box" > "${run_path}/${bin_name}.log" 2>&1 &
        echo -n $! > "${pid_file}"
      else
        log error "Configuration failed, please check the ${run_path}/${bin_name}-report.log file."
        MESSAGE=$(cat "${run_path}/${bin_name}-report.log")
        MESSAGE+=$(cat "${run_path}/${bin_name}.log")
        log error "$MESSAGE"
        exit 1
      fi
      ;;
    clash)
      prepare_clash
      if ${bin_path} -t -d "${data_dir}/${bin_name}" -f "${clash_config}" > "${run_path}/${bin_name}-report.log" 2>&1; then
        nohup busybox setuidgid ${box_user_group} ${bin_path} -d "${data_dir}/${bin_name}" -f "${clash_config}" > "${run_path}/${bin_name}.log" 2>&1 &
        echo -n $! > "${pid_file}"
      else
        log error "configuration failed, please check the ${run_path}/${bin_name}-report.log file."
        MESSAGE=$(cat "${run_path}/${bin_name}-report.log")
        log error "$MESSAGE"
        exit 1
      fi
      ;;
    xray)
      # set network_mode variable value to "tproxy"
      sed -i 's/\(network_mode=\)\"[^\"]*\"/\1"tproxy"/g' ${settings}
      json_files=( "${data_dir}/${bin_name}"/*.json )
      toml_files=( "${data_dir}/${bin_name}"/*.toml )
      if [[ ${#json_files[@]} -eq 0 || ${#toml_files[@]} -eq 0 ]]; then
          log error "File ${data_dir}/${bin_name}/*.json/*.toml not found"
          exit 1
      fi
      export XRAY_LOCATION_ASSET="${data_dir}/${bin_name}"
      export XRAY_LOCATION_CONFDIR="${data_dir}/${bin_name}"
      if ${bin_path} -test > "${run_path}/${bin_name}-report.log" 2>&1; then
        nohup busybox setuidgid ${box_user_group} ${bin_path} > "${run_path}/${bin_name}.log" 2>&1 &
        echo -n $! > "${pid_file}"
      else
        log error "configuration failed, please check the ${run_path}/${bin_name}-report.log file."
        MESSAGE=$(cat "${run_path}/${bin_name}-report.log")
        log error "$MESSAGE"
        exit 1
      fi
      ;;
    v2fly)
      # set network_mode variable value to "tproxy"
      sed -i 's/\(network_mode=\)\"[^\"]*\"/\1"tproxy"/g' ${settings}
      json_files=( "${data_dir}/${bin_name}"/*.json )
      toml_files=( "${data_dir}/${bin_name}"/*.toml )
      if [[ ${#json_files[@]} -eq 0 || ${#toml_files[@]} -eq 0 ]]; then
          log error "File ${data_dir}/${bin_name}/*.json/*.toml not found"
          exit 1
      fi
      export V2RAY_LOCATION_ASSET="${data_dir}/${bin_name}"
      export V2RAY_LOCATION_CONFDIR="${data_dir}/${bin_name}"
      if (${bin_path} test > "${run_path}/${bin_name}-report.log" 2>&1) ; then
        nohup busybox setuidgid ${box_user_group} ${bin_path} run > "${run_path}/${bin_name}.log" 2>&1 &
        echo -n $! > ${pid_file}
      else
        log error "configuration failed, please check the ${run_path}/${bin_name}-report.log file."
        MESSAGE=$(cat "${run_path}/${bin_name}-report.log")
        log error "$MESSAGE"
        exit 1
      fi
      ;;
    *)
      log error "kernel error, ${bin_name} write is wrong."
      exit 1
      ;;
  esac
  rm -f "${run_path}/${bin_name}-report.log"
}

cgroup_limit() {
  if [ "${cgroup_memory}" = "true" ]; then
    if ${scripts_dir}/box.tool cgroup; then
      log info "cgroup limit: ${cgroup_memory_limit}."
    else
      log warn "Failed to enable cgroup for ${bin_name}."
      log warn "Cgroups is turned off"
      sed -i -E "/cgroup_memory/ s/(true)/false/" "${settings}"
    fi
  else
    log info "${bin_name} cgroup: disabled."
  fi
}

# Function to display the usage of a binary
# This script retrieves information about a running binary process and logs it to a log file.

bin_usage() {
  # Get the process ID of the binary
  bin_pid=$(busybox pidof ${bin_name})

  if [ -z "${bin_pid}" ]; then
    log error "${bin_name} is not running."
    return
  fi

  # Get the memory usage of the binary
  rss=$(grep VmRSS /proc/${bin_pid}/status | busybox awk '{ print $2 }')
  [ "${rss}" -ge 1024 ] && bin_rss="$(expr ${rss} / 1024) MB" || bin_rss="${rss} KB"
  swap=$(grep VmSwap /proc/${bin_pid}/status | busybox awk '{ print $2 }')
  [ "${swap}" -ge 1024 ] && bin_swap="$(expr ${swap} / 1024) MB" || bin_swap="${swap} KB"

  # Get the state of the binary
  state=$(grep State /proc/${bin_pid}/status | busybox awk '{ print $2" "$3 }')

  # Get the user and group of the binary
  user_group=$(stat -c %U:%G /proc/${bin_pid})

  # Log the information
  log info "${bin_name} has started with the '${user_group}' user group."
  log info "${bin_name} status: ${state} (PID: ${bin_pid})"
  log info "${bin_name} memory usage: ${bin_rss}, swap: ${bin_swap}"

  # Get the CPU usage of the binary
  cpu=$(ps -p ${bin_pid} -o %cpu | busybox awk 'NR==2{print $1}' 2> /dev/null)
  if [ -n "${cpu}" ]; then
    log info "${bin_name} CPU usage: ${cpu}%"
  else
    log info "${bin_name} CPU usage: not available"
  fi

  # Get the running time of the binary
  running_time=$(ps -p ${bin_pid} -o etime | busybox awk 'NR==2{print $1}' 2> /dev/null)
  if [ -n "${running_time}" ]; then
    log info "${bin_name} running time: ${running_time}"
  else
    log info "${bin_name} running time: not available"
  fi

  # Save the process ID to the pid file
  echo -n "${bin_pid}" > "${pid_file}"
}

display_bin_pid() {
  # Checks if bin_name is defined
  if [ -z "${bin_name}" ]; then
    log error "bin_name: '${bin_name}<unknown>' not defined"
    return 1
  fi
  # Look up the PID of bin_name
  bin_pid=$(busybox pidof "${bin_name}")
  # Checks if bin_name is running
  if [ -n "${bin_pid}" ]; then
    # If so, prints a message and calls the bin_usage function
    log info "${bin_name} service is running. (PID: ${bin_pid})."
    bin_usage
  else
    # Otherwise, it prints a message and returns status 1
    log warn "${bin_name} service is stopped."
    return 1
  fi
}

crontab_alive() {
  # Start crond with the "-c" option and keep it in the background
  nohup busybox crond -c "${run_path}" > /dev/null 2>&1 &
  # Delete the previous crontab and create a new crontab
  busybox crontab -c "${run_path}" -r
  touch "${run_path}/root"
  chmod 0600 "${run_path}/root"
  # Added a cron job to call box.tool keptns every minute
  if [ "${intervaldns}" != "" ]; then
    echo "${intervaldns} ${scripts_dir}/box.tool keepdns" >> "${run_path}/root"
    log info "DNS remains open."
  fi
  # Displays a configuration message if bin_name is "clash|xray|sing-box|v2ray"
  case "${bin_name}" in
    "clash") log info "config '${clash_config}'";;
    "xray"|"sing-box"|"v2ray") log info "config '${data_dir}/${bin_name}/*.json'";;
    *) log error "${bin_name}: <unknown>"; exit 1;;
  esac
  # Executes the crontab_geo function
  crontab_geo
}

start_box() {
  # Clear the log file and add the timestamp and delimiter
  echo -n "" > "${logs_file}"
  # Check whether busybox is installed or not on the system using command -v
  if ! command -v busybox &> /dev/null; then
    log error "BusyBox command not found"
    exit 1
  fi
  # Check if the script is being run in interactive mode or not and display the appropriate message
  if [ -t 1 ]; then
    echo -e "\033[1;31m$(date)\033[0m"
    echo -e "\033[1;32m--------------------------------------------\033[0m"
  else
    echo "$(date)" | tee -a "${logs_file}" > /dev/null 2>&1
    echo "--------------------------------------------" | tee -a "${logs_file}" > /dev/null 2>&1
  fi
  # Update iptables if bin_name is still running
  if bin_pid=$(busybox pidof "${bin_name}"); then
    log info "${bin_name} service is still running, refreshing iptables"
    if "${scripts_dir}/box.iptables" renew; then
      log info "iptables is refreshed successfully"
      exit 1
    else
      log error "failed to refresh iptables"
      exit 1
    fi
  else
    case "${bin_name}" in
      "xray"|"sing-box"|"clash"|"v2fly") log info "Good day" ;;
      *) log error "bin_name: '${bin_name} <unknown>' not defined"; exit 1 ;;
    esac
  fi
  # Check permissions, check for bin existence, delete old logs, create a TUN if necessary, run box, and wait for 1 second
  check_permission
  check_in_bin
  delete_logs
  create_tun
  run_box
  sleep 1
  # Execute crontab_alive if crontab_sec is not equal to "false"
  if [ "${crontab_sec}" != "false" ]; then
    crontab_alive
  else
    log info "crontab: disabled."
  fi
  # Execute the cgroup_limit, display_bin_pid, detected_port, still_alive functions
  cgroup_limit
  detected_port
  still_alive
  display_bin_pid
}

stop_box() {
  # Find cronjob PID using `pgrep`
  cronkill=$(pgrep -f "crond -c ${run_path}")
  for cron in ${cronkill[@]}; do
    kill -15 "${cron}"
  done
  # Kill each binary using a loop
  for bin in ${bin_list[@]}; do
    # Use `busybox pkill` to kill the binary with signal 15, otherwise use `killall`.
    if busybox pkill -15 "${bin}"; then
      : # Do nothing if busybox pkill is successful
    else
      killall -15 "${bin}" || true
    fi
  done
  sleep 1
  # Check if the binary has stopped
  if ! busybox pidof "${bin_name}" >/dev/null 2>&1; then
    # Delete the `box.pid` file if it exists
    if [ -f "${pid_file}" ]; then
      rm -f "${pid_file}"
      sleep 0.5
    fi
    display_bin_pid || log warn "${bin_name} disconnected."
  else
    log error "Failed to stop ${bin_name}"
    log warn "Force stop ${bin_name}."
    for bin in "${bin_list[@]}"; do
      # Use `busybox pkill` to kill the binary with signal 9, otherwise use `killall`.
      if busybox pkill -9 "${bin}"; then
        : # Do nothing if busybox pkill is successful
      else
        killall -9 "${bin}" >/dev/null 2>&1 || true
      fi
    done
    sleep 0.5
    # Check whether the binary has stopped
    if ! busybox pidof "${bin_name}" >/dev/null 2>&1; then
      log warn "done"
      rm -f "${pid_file}"
    fi
  fi
}

case "$1" in
  start)
    stop_box >> /dev/null 2>&1
    start_box
    ;;
  stop)
    stop_box
    ;;
  restart)
    stop_box
    ${scripts_dir}/box.iptables disable >> /dev/null 2>&1
    sleep 1
    start_box
    ${scripts_dir}/box.iptables renew
    ;;
  usage)
    case "${bin_name}" in
      clash) log debug "$(${bin_path} -v)";;
      *) log debug "$(${bin_path} version)";;
    esac
    # Check whether the service is running or not
    if [ $(busybox pidof ${bin_name}) ]; then
      bin_usage
    else
      log warn "${bin_name} service is stopped"
    fi
    ;;
  *)
    echo "$0:  usage: $0 {start|stop|restart|usage}"
    ;;
esac
 